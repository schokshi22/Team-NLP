{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/sapnachokshi/word2vec-sample-implementation?scriptVersionId=180666479\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"c88cff42","metadata":{"execution":{"iopub.execute_input":"2024-05-30T21:02:23.673221Z","iopub.status.busy":"2024-05-30T21:02:23.672192Z","iopub.status.idle":"2024-05-30T21:02:35.925292Z","shell.execute_reply":"2024-05-30T21:02:35.923973Z"},"papermill":{"duration":12.261864,"end_time":"2024-05-30T21:02:35.928313","exception":false,"start_time":"2024-05-30T21:02:23.666449","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["[nltk_data] Downloading package punkt to /usr/share/nltk_data...\n","[nltk_data]   Package punkt is already up-to-date!\n","[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n"]},{"data":{"text/plain":["True"]},"execution_count":1,"metadata":{},"output_type":"execute_result"}],"source":["# Import necessary libraries\n","from gensim.models import KeyedVectors\n","from nltk.tokenize import word_tokenize\n","from nltk.corpus import stopwords\n","import nltk\n","import pandas as pd\n","import numpy as np\n","import os \n","\n","# Download necessary NLTK data\n","nltk.download('punkt')\n","nltk.download('stopwords')"]},{"cell_type":"code","execution_count":2,"id":"d0ad06d1","metadata":{"execution":{"iopub.execute_input":"2024-05-30T21:02:35.937395Z","iopub.status.busy":"2024-05-30T21:02:35.936174Z","iopub.status.idle":"2024-05-30T21:03:52.226577Z","shell.execute_reply":"2024-05-30T21:03:52.225665Z"},"papermill":{"duration":76.297585,"end_time":"2024-05-30T21:03:52.229369","exception":false,"start_time":"2024-05-30T21:02:35.931784","status":"completed"},"tags":[]},"outputs":[],"source":["# Path to the Google News vectors dataset in Kaggle environment\n","model_path = '/kaggle/input/googlenewsvectorsnegative300/GoogleNews-vectors-negative300.bin'\n","\n","# Load the pre-trained Word2Vec model\n","model = KeyedVectors.load_word2vec_format(model_path, binary=True)\n","\n","# Test the model - Words most similar \n","#if 'sample' in model.key_to_index:\n","#    similar_words = model.most_similar('sample')\n","#    print(\"Words similar to 'sample':\", similar_words)\n","\n","# Get the vector for a word\n","#if 'sample' in model.key_to_index:\n","#    word_vector = model['sample']\n","#    print(\"Vector for 'sample':\", word_vector)"]},{"cell_type":"code","execution_count":3,"id":"98678283","metadata":{"execution":{"iopub.execute_input":"2024-05-30T21:03:52.238512Z","iopub.status.busy":"2024-05-30T21:03:52.237569Z","iopub.status.idle":"2024-05-30T21:03:52.244158Z","shell.execute_reply":"2024-05-30T21:03:52.243142Z"},"papermill":{"duration":0.013565,"end_time":"2024-05-30T21:03:52.246608","exception":false,"start_time":"2024-05-30T21:03:52.233043","status":"completed"},"tags":[]},"outputs":[],"source":["# Function to compute similarity between two words\n","def compute_similarity(word1, word2):\n","    if word1 in model.key_to_index and word2 in model.key_to_index:\n","        similarity = model.similarity(word1, word2)\n","        return similarity\n","    else:\n","        missing_words = [word for word in [word1, word2] if word not in model.key_to_index]\n","        return f\"Word(s) not in vocabulary: {', '.join(missing_words)}\""]},{"cell_type":"code","execution_count":4,"id":"cf0239af","metadata":{"execution":{"iopub.execute_input":"2024-05-30T21:03:52.25439Z","iopub.status.busy":"2024-05-30T21:03:52.254022Z","iopub.status.idle":"2024-05-30T21:03:52.259038Z","shell.execute_reply":"2024-05-30T21:03:52.258034Z"},"papermill":{"duration":0.011421,"end_time":"2024-05-30T21:03:52.261285","exception":false,"start_time":"2024-05-30T21:03:52.249864","status":"completed"},"tags":[]},"outputs":[],"source":["# Specify the indiviudal input file paths\n","input_file_paths = [\n","    '/kaggle/input/actions-and-agents-datasets/actions_and_distractors_output.csv',  # Update this path\n","    '/kaggle/input/actions-and-agents-datasets/agents_and_distractors_output.csv'  # Update this path\n","]\n","\n","# Specify the corresponding output file names\n","output_file_names = [\n","    'output_actions_similarity_scores.csv',\n","    'output_agents_similairity_scores.csv'\n","]"]},{"cell_type":"code","execution_count":5,"id":"7b249a10","metadata":{"execution":{"iopub.execute_input":"2024-05-30T21:03:52.268909Z","iopub.status.busy":"2024-05-30T21:03:52.268579Z","iopub.status.idle":"2024-05-30T21:03:52.428147Z","shell.execute_reply":"2024-05-30T21:03:52.427159Z"},"papermill":{"duration":0.166472,"end_time":"2024-05-30T21:03:52.430965","exception":false,"start_time":"2024-05-30T21:03:52.264493","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Results for actions_and_distractors_output.csv saved to output_actions_similarity_scores.csv:\n","            word1       word2                               similarity\n","0          Target  Action cue    Word(s) not in vocabulary: Action cue\n","1    baby-clothes      change  Word(s) not in vocabulary: baby-clothes\n","2    baby-clothes     launder  Word(s) not in vocabulary: baby-clothes\n","3    baby-clothes       dress  Word(s) not in vocabulary: baby-clothes\n","4    baby-clothes        wash  Word(s) not in vocabulary: baby-clothes\n","..            ...         ...                                      ...\n","755        window    insulate                                  0.11642\n","756        window       cover                                 0.111925\n","757        window   reinforce                                 0.057874\n","758        window        look                                 0.131642\n","759        window        peer                                  0.10555\n","\n","[760 rows x 3 columns]\n","Results for agents_and_distractors_output.csv saved to output_agents_similairity_scores.csv:\n","            word1      word2                               similarity\n","0          Target  Agent cue     Word(s) not in vocabulary: Agent cue\n","1    baby-clothes     infant  Word(s) not in vocabulary: baby-clothes\n","2    baby-clothes      nanny  Word(s) not in vocabulary: baby-clothes\n","3    baby-clothes     mother  Word(s) not in vocabulary: baby-clothes\n","4    baby-clothes     parent  Word(s) not in vocabulary: baby-clothes\n","..            ...        ...                                      ...\n","549        window  decorator                                 0.143647\n","550        window     viewer                                 0.183931\n","551        window   resident                                 0.065734\n","552        window    glazier                                 0.272855\n","553        window   designer                                  0.02201\n","\n","[554 rows x 3 columns]\n"]}],"source":["# Process each input file individually\n","for input_file_path, output_file_name in zip(input_file_paths, output_file_names):\n","    # Read the CSV file into a DataFrame, specifying only the first two columns\n","    df = pd.read_csv(input_file_path, usecols=[0, 1], names=['word1', 'word2'])\n","    \n","    # Ensure the DataFrame has the correct columns\n","    if 'word1' not in df.columns or 'word2' not in df.columns:\n","        raise ValueError(\"CSV file must contain 'word1' and 'word2' columns\")\n","\n","    # Create a new column to store the similarity results\n","    df['similarity'] = df.apply(lambda row: compute_similarity(row['word1'], row['word2']), axis=1)\n","    \n","    # Save the results to a new CSV file with the desired name\n","    output_csv_file_path = os.path.join('/kaggle/working', output_file_name)  # Update this path if needed\n","    df.to_csv(output_csv_file_path, index=False)\n","    \n","    # Print a sample of the results\n","    print(f\"Results for {os.path.basename(input_file_path)} saved to {output_file_name}:\")\n","    print(df)\n","\n","# Example usage\n","#compute_similarity('nanny', 'infant')\n","#compute_similarity('king', 'queen')\n","#compute_similarity('car', 'bicycle')"]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"datasetId":6763,"sourceId":9801,"sourceType":"datasetVersion"},{"datasetId":5050052,"sourceId":8469579,"sourceType":"datasetVersion"}],"dockerImageVersionId":30698,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"},"papermill":{"default_parameters":{},"duration":93.080662,"end_time":"2024-05-30T21:03:53.757705","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-05-30T21:02:20.677043","version":"2.5.0"}},"nbformat":4,"nbformat_minor":5}